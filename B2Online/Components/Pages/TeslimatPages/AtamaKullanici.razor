@page "/panel/kullaniciAtama"
@layout Components.Layout.MainLayout
<PageTitle>OMNIA</PageTitle>
@using System.Text.Json
@inject IJSRuntime JSRuntime
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
<link href="_content/DevExpress.Blazor.Themes/bootstrap-external.bs5.min.css" rel="stylesheet" asp-append-version="true" />
<div class="x-auto px-4 mb-4">

    <h3 class="text-xl lg:text-4xl text-blue-950 font-bold text-center p-4">
        Kullanıcı İşlemleri
    </h3>

    <div class="lg:w-3/5 mx-auto px-4 mb-4">
        <div class="flex items-center justify-between bg-gradient-to-b from-blue-950 via-violet-950 to-purple-950 px-8 py-2">
            <a href="panel/kullanici">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-7 h-7 text-white hover:text-orange-300">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18" />
                </svg>
            </a>
            <h1 class="text-lg text-white font-bold py-2 px-2">Kullanıcı Atama</h1>
            <div></div>
        </div>
        <div class="bg-white shadow-md p-4">
            <div class="pb-2">
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                    <DxToolbarItem Text="Yeni" Click="NewItem_Click" />
                    <DxToolbarItem Text="Düzenle" Click="EditItem_Click" />
                    <DxToolbarItem Text="Sil" Click="DeleteItem_Click" />
                    <DxToolbarItem Text="Seç" BeginGroup="true" Click="ColumnChooserItem_Click" />
                    <DxToolbarItem Text="İndir">
                        <Items>
                            <DxToolbarItem Text="CSV" Click="ExportCsvItem_Click" />
                            <DxToolbarItem Text="XLSX" Click="ExportXlsxItem_Click" />
                            <DxToolbarItem Text="XLS" Click="ExportXlsItem_Click" />
                        </Items>
                    </DxToolbarItem>
                </DxToolbar>
            </div>
            <div class="grid-container">
                <DxGrid @ref="Grid"
                        Data="Data"
                        FocusedRowEnabled="true"
                        CustomizeElement="Grid_CustomizeElement"
                        EditModelSaving="Grid_EditModelSaving"
                        DataItemDeleting="Grid_DataItemDeleting"
                        FocusedRowChanged="Grid_FocusedRowChanged"
                        KeyboardNavigationEnabled="true">

                    <Columns>
                        <DxGridDataColumn FieldName="FirstName" Caption="Ad" MinWidth="150" />
                        <DxGridDataColumn FieldName="LastName" Caption="Soyad" MinWidth="150" />
                        <DxGridDataColumn FieldName="Email" Caption="Email" MinWidth="150" />
                        <DxGridDataColumn FieldName="Pass" Caption="Şifre" Width="100" />
                        <DxGridDataColumn FieldName="Phone" Caption="Telefon No"  MinWidth="150" />
                    </Columns>
                    <EditFormTemplate Context="EditFormContext">
                        <DxFormLayout CssClass="w-100">
                            <DxFormLayoutItem Caption="Ad" ColSpanMd="6">
                                @EditFormContext.GetEditor("FirstName")
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Soyad" ColSpanMd="6">
                                @EditFormContext.GetEditor("LastName")
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Email" ColSpanMd="6">
                                @EditFormContext.GetEditor("Email")
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Şifre" ColSpanMd="6">
                                @EditFormContext.GetEditor("Pass")
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Telefon No" ColSpanMd="6">
                                @EditFormContext.GetEditor("Phone")
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </EditFormTemplate>
                </DxGrid>

            </div>

        </div>

    </div>
</div>

@code {
    const string ExportFileName = "ExportResult";
    bool EditItemsEnabled { get; set; }
    int FocusedRowVisibleIndex { get; set; }
    EditableEmployee[] Data { get; set; }
    IGrid Grid { get; set; }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
        {
            e.CssClass = "dx-rows";
        }
        if (e.ElementType == GridElementType.HeaderRow || e.ElementType == GridElementType.GroupPanelHeader)
        {
            e.CssClass = "dx-header";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGridDataAsync();
    }

    async Task LoadGridDataAsync()
    {
        Data = EmployeeData.GetSampleEmployees().ToArray();
    }

    void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
        UpdateEditItemsEnabled(true);
    }

    void UpdateEditItemsEnabled(bool enabled)
    {
        EditItemsEnabled = enabled;
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var employeeToDelete = (EditableEmployee)e.DataItem;
        Data = Data.Where(emp => emp.EmployeeID != employeeToDelete.EmployeeID).ToArray();
        if (Data.Length == 0)
            UpdateEditItemsEnabled(false);
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.IsNew)
        {
            var newEmployee = (EditableEmployee)e.EditModel;
            newEmployee.EmployeeID = Data.Max(emp => emp.EmployeeID) + 1;
            Data = Data.Concat(new[] { newEmployee }).ToArray();
        }
        else
        {
            var editedEmployee = (EditableEmployee)e.EditModel;
            var index = Array.FindIndex(Data, emp => emp.EmployeeID == editedEmployee.EmployeeID);
            Data[index] = editedEmployee;
        }
    }

    async Task NewItem_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    async Task EditItem_Click()
    {
        await Grid.StartEditRowAsync(FocusedRowVisibleIndex);
    }

    async Task DeleteItem_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
    }

    void ColumnChooserItem_Click(ToolbarItemClickEventArgs e)
    {
        Grid.ShowColumnChooser();
    }

    async Task ExportXlsxItem_Click()
    {
        await Grid.ExportToXlsxAsync(ExportFileName);
    }

    async Task ExportXlsItem_Click()
    {
        await Grid.ExportToXlsAsync(ExportFileName);
    }

    async Task ExportCsvItem_Click()
    {
        await Grid.ExportToCsvAsync(ExportFileName);
    }

    public class EditableEmployee
    {
        public int EmployeeID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Pass { get; set; }
        public string Phone { get; set; }
    }

    public class EmployeeData
    {
        public static List<EditableEmployee> GetSampleEmployees()
        {
            return new List<EditableEmployee>
            {
                new EditableEmployee
                {
                    EmployeeID = 1,
                    FirstName = "Alp",
                    LastName = "Gökçeer",
                    Email = "a@b2cargo.com",
                    Phone = "+90532a",
                    Pass = "****a"
                },
                new EditableEmployee
                {
                    EmployeeID = 2,
                    FirstName = "Gülşah",
                    LastName = "Durmuş",
                    Email = "b@b2cargo.com",
                    Phone = "+90532b",
                    Pass = "****b"
                },
                new EditableEmployee
                {
                    EmployeeID = 3,
                    FirstName = "Melih",
                    LastName = "Güney",
                    Email = "c@b2cargo.com",
                    Phone = "+90532c",
                    Pass = "****c"
                },
            };
        }
    }
}
